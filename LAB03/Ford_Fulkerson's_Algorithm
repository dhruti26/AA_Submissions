//Contributor : CE026 Dhruti Desai
//Time Complexity of Algorithm is O(maxflow*(O(V+E)))
#include<bits/stdc++.h>
using namespace std;

bool bfs(vector<vector<int>>&resGraph,int s,int t,vector<int>&parent){
 	int n=resGraph[0].size();// here 6
 	int visited[n];
 	for(int i=0;i<n;i++){
     	visited[i]=0;
 	}
	queue<int>q;
	q.push(s);
	visited[s]=1;
	parent[s]=-1;
    
	while(!q.empty()){
    	int u=q.front();
    	q.pop();
    	for(int v=0;v<n;v++){
        	if(visited[v] == 0 && resGraph[u][v] > 0){
            	if(v == t){
                	//reach sink(destination)
                	parent[v]=u;
                	//return augmented path
                	return true;
            	}
            	q.push(v);
            	parent[v]=u;
            	visited[v]=1;
        	}
    	}
	}
  	return false;
}
int ford_fulkerson(vector<vector<int>>&G,int s,int t){
	int n=G[0].size();// here 6
   vector<vector<int>>resGraph(n,vector<int>(n));
	for(int u=0;u<n;u++){
    	for(int v=0;v<n;v++){
        	resGraph[u][v]=G[u][v];  //initially residual graph same as original Graph
    	}
	}
	vector<int>parent(n); //used in BFS
	int max_flow=0;
	while(bfs(resGraph,s,t,parent)){
    	//traverse till augmented pathe exists
    	int path_flow=INT_MAX;
    	//traverse augmented path from sink to source
    	for(int v=t;v!=s;v=parent[v]){
        	int u=parent[v];
        	path_flow=min(path_flow,resGraph[u][v]); //calculate bottle_neck for augmented path
    	}
     	// created new residual graph after selected augmented path
    	for(int v=t;v!=s;v=parent[v]){
        	int u=parent[v];
        	resGraph[u][v]-=path_flow;
        	resGraph[v][u]+=path_flow;
    	}
    	max_flow+=path_flow; //add flow of path in answer
	}
	return max_flow;
}
int main() {
	//adjacency matrix created
  vector<vector<int>>G={{0,16,13,0,0,0},
            	{0,0,10,12,0,0},
            	{0,4,0,0,14,0},
            	{0,0,9,0,0,20},
            	{0,0,0,7,0,4},
            	{0,0,0,0,0,0}};
           	 
   int ans = ford_fulkerson(G,0,5); //graph,source,sink
   cout<<"Max flow of Graph using Ford Fulkerson's Algorithm  is: " << ans;
}
